# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils/utils.interaction_utils.ipynb (unless otherwise specified).

__all__ = ['user_activity_count', 'item_activity_count']

# Cell
from typing import List, Optional, Callable, Union, Any, Tuple

import pandas as pd

# Cell
def user_activity_count(df, user_col='userid', event_col='event'):
    user_activity_count = dict()
    events = df[event_col].unique().tolist()
    for _, row in df.iterrows():
        if row[user_col] not in user_activity_count:
            user_activity_count[row[user_col]] = {event:0 for event in events}
        for event in events:
            if row[event_col] == event:
                user_activity_count[row[user_col]][event] += 1

    user_activity = pd.DataFrame(user_activity_count)
    user_activity = user_activity.transpose()
    user_activity['activity'] = user_activity.sum(axis=1)

    _df = pd.DataFrame(user_activity.activity.value_counts()).reset_index()
    _df.columns = ['#Interactions','#Users']
    return _df, user_activity

# Cell
def item_activity_count(df, item_col='itemid', event_col='event'):
    item_activity_count = dict()
    events = df[event_col].unique().tolist()
    for _, row in df.iterrows():
        if row[item_col] not in item_activity_count:
            item_activity_count[row[item_col]] = {event:0 for event in events}
        for event in events:
            if row[event_col] == event:
                item_activity_count[row[item_col]][event] += 1

    item_activity = pd.DataFrame(item_activity_count)
    item_activity = item_activity.transpose()
    item_activity['activity'] = item_activity.sum(axis=1)

    _df = pd.DataFrame(item_activity.activity.value_counts()).reset_index()
    _df.columns = ['#Interactions','#Items']
    return _df, item_activity