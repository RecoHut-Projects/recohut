# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils/utils.session.ipynb (unless otherwise specified).

__all__ = ['construct_session_sequences', 'get_session_stats']

# Cell
import numpy as np
import pandas as pd
from collections import Counter

# Cell
def construct_session_sequences(df, sessionID, itemID):
    """
    Given a dataset in pandas df format, construct a list of lists where each sublist
    represents the interactions relevant to a specific session, for each sessionID.
    These sublists are composed of a series of itemIDs (str) and are the core training
    data used in the Word2Vec algorithm.
    This is performed by first grouping over the SessionID column, then casting to list
    each group's series of values in the ItemID column.
    INPUTS
    ------------
    df:                 pandas dataframe
    sessionID: str      column name in the df that represents invididual sessions
    itemID: str         column name in the df that represents the items within a session
    """
    grp_by_session = df.groupby([sessionID])

    session_sequences = []
    for name, group in grp_by_session:
        session_sequences.append(list(group[itemID].values))

    return session_sequences

# Cell
def get_session_stats(df: pd.DataFrame,
                      user_col: str = 'userid',
                      seq_col: str = 'sessid',
                      ):

    cnt = Counter()
    df[seq_col].map(cnt.update);

    stats = []
    sequence_length = df[seq_col].map(len).values
    n_sessions_per_user = df.groupby(user_col).size()

    stats.append('Number of items: {}'.format(len(cnt)))
    stats.append('Number of users: {}'.format(df[user_col].nunique()))
    stats.append('Number of sessions: {}'.format(len(df)))
    stats.append('')
    stats.append('Session length:\n\tAverage: {:.2f}\n\tMedian: {}\n\tMin: {}\n\tMax: {}'.format(
        sequence_length.mean(),
        np.quantile(sequence_length, 0.5),
        sequence_length.min(),
        sequence_length.max()))
    stats.append('')
    stats.append('Sessions per user:\n\tAverage: {:.2f}\n\tMedian: {}\n\tMin: {}\n\tMax: {}'.format(
        n_sessions_per_user.mean(),
        np.quantile(n_sessions_per_user, 0.5),
        n_sessions_per_user.min(),
        n_sessions_per_user.max()))
    stats.append('')
    stats.append('Most popular items: {}'.format(cnt.most_common(5)))
    return '\n'.join(stats)